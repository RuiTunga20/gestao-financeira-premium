name: Desktop and Mobile Builds (Linux, macOS, Windows, AAB, APK, IPA)

on:
  # Runs on push to any of the below branches
  push:
    branches:
      - main

  # Runs on pull request events that target one of the below branches
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab of the repository
  workflow_dispatch:

env:
  # https://flet.dev/docs/publish#versioning
  BUILD_NUMBER: 1
  BUILD_VERSION: 1.0.0

  # Python version to use
  PYTHON_VERSION: 3.12.8
  
  # flet-cli version to install for `flet build`
  FLET_CLI_VERSION: 0.27.5
  
  # Ensures Python uses UTF-8 encoding by default
  PYTHONUTF8: 1
  
  # Disables rich text formatting in Flet CLI output
  FLET_CLI_NO_RICH_OUTPUT: 1
  
  # Disables progress bars when using UV
  UV_NO_PROGRESS: 1

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install flet-cli ${{ env.FLET_CLI_VERSION }}
      run: |
        python -m pip install --upgrade pip
        pip install flet-cli==$FLET_CLI_VERSION

    - name: Patch for linux build
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev

    - name: Flet Build Linux
      run: |
        flet build linux --verbose --build-number=$BUILD_NUMBER --build-version=$BUILD_VERSION

    - name: Upload Linux Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: linux-build-artifact
        path: build/linux
        if-no-files-found: warn
        overwrite: false

  build-macos:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install flet-cli ${{ env.FLET_CLI_VERSION }}
      run: |
        python -m pip install --upgrade pip
        pip install flet-cli==$FLET_CLI_VERSION

    - name: Flet Build macOS
      run: |
        flet build macos --verbose --build-number=$BUILD_NUMBER --build-version=$BUILD_VERSION

    - name: Upload macOS Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: macos-build-artifact
        path: build/macos
        if-no-files-found: warn
        overwrite: false

  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install flet-cli ${{ env.FLET_CLI_VERSION }}
      run: |
        python -m pip install --upgrade pip
        pip install flet-cli==$env:FLET_CLI_VERSION

    - name: Flet Build Windows
      run: |
        flet build windows --verbose --no-rich-output --build-number=$env:BUILD_NUMBER --build-version=$env:BUILD_VERSION

    - name: Upload Windows Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: windows-build-artifact
        path: build/windows
        if-no-files-found: warn
        overwrite: false

  build-aab:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install flet-cli ${{ env.FLET_CLI_VERSION }}
      run: |
        python -m pip install --upgrade pip
        pip install flet-cli==$FLET_CLI_VERSION

    - name: Flet Build AAB
      run: |
        flet build aab --verbose --build-number=$BUILD_NUMBER --build-version=$BUILD_VERSION

    - name: Upload AAB Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: aab-build-artifact
        path: build/aab
        if-no-files-found: warn
        overwrite: false

  build-apk:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    # üîß ADICIONADO: Limpeza de cache para evitar tela branca
    - name: Clear Flet Cache (Fix White Screen)
      run: |
        echo "=== üßπ Limpando cache problem√°tico ==="
        rm -rf ~/.cookiecutter/
        rm -rf ~/.flutter/
        rm -rf ~/.flet/
        rm -rf /tmp/flet_*
        rm -rf build/
        echo "‚úÖ Cache limpo com sucesso"

    # üîß ADICIONADO: Verifica√ß√£o da estrutura do projeto
    - name: Verify Project Structure
      run: |
        echo "=== üìÅ Verificando estrutura do projeto ==="
        ls -la
        
        echo "=== üêç Verificando main.py ==="
        if [ -f main.py ]; then
          echo "‚úÖ main.py encontrado"
          echo "Primeiras 20 linhas:"
          head -20 main.py
        else
          echo "‚ùå ERRO: main.py n√£o encontrado!"
          exit 1
        fi
        
        echo "=== üì¶ Verificando requirements.txt ==="
        if [ -f requirements.txt ]; then
          echo "‚úÖ requirements.txt encontrado"
          echo "Conte√∫do:"
          cat requirements.txt
        else
          echo "‚ö†Ô∏è requirements.txt n√£o encontrado, criando b√°sico..."
          echo "flet==$FLET_CLI_VERSION" > requirements.txt
        fi

    - name: Install flet-cli ${{ env.FLET_CLI_VERSION }}
      run: |
        python -m pip install --upgrade pip
        pip install flet-cli==$FLET_CLI_VERSION

    # üîß ADICIONADO: Teste b√°sico do app antes do build
    - name: Test App Structure (Prevent White Screen)
      run: |
        echo "=== üß™ Testando estrutura do app ==="
        python -c "
import sys
import traceback

print('Python version:', sys.version)

try:
    # Testa import do flet
    import flet as ft
    print('‚úÖ Flet importado com sucesso:', ft.__version__)
    
    # Testa import do main
    import main
    print('‚úÖ main.py importado com sucesso')
    
    # Verifica se existe a fun√ß√£o main
    if hasattr(main, 'main') and callable(getattr(main, 'main')):
        print('‚úÖ Fun√ß√£o main() encontrada e √© cham√°vel')
    else:
        print('‚ùå ERRO: Fun√ß√£o main() n√£o encontrada ou n√£o √© cham√°vel')
        sys.exit(1)
    
    print('‚úÖ Estrutura do app v√°lida - prosseguindo com build')
    
except ImportError as e:
    print('‚ùå ERRO DE IMPORT:', str(e))
    traceback.print_exc()
    sys.exit(1)
except Exception as e:
    print('‚ùå ERRO GERAL:', str(e))
    traceback.print_exc()
    sys.exit(1)
"

    # üîß ADICIONADO: Configura√ß√£o espec√≠fica para APK
    - name: Create APK Build Configuration
      run: |
        echo "=== ‚öôÔ∏è Criando configura√ß√£o otimizada para APK ==="
        
        # Cria pyproject.toml com configura√ß√µes anti-tela-branca
        cat > pyproject.toml << 'EOF'
[tool.flet]
# Configura√ß√µes gerais
compile_app = true
cleanup_app = true
split_per_abi = false

[tool.flet.android]
# Configura√ß√µes Android espec√≠ficas
min_sdk_version = 21
target_sdk_version = 34
compile_sdk_version = 34

# Configura√ß√µes de √≠cone adaptativo
[tool.flet.android.adaptive_icon]
background = "#FFFFFF"

# Configura√ß√µes de splash screen
[tool.flet.android.splash]
color = "#FFFFFF"
dark_color = "#FFFFFF"

# Configura√ß√µes de build otimizadas
[tool.flet.build]
clear_cache = true
include_packages = []
exclude_packages = ["test*", "debug*", "unittest*"]
EOF
        
        echo "‚úÖ Configura√ß√£o criada em pyproject.toml"
        echo "Conte√∫do:"
        cat pyproject.toml

    # üîß MODIFICADO: Build APK com par√¢metros otimizados
    - name: Flet Build APK (Optimized)
      run: |
        echo "=== üöÄ Iniciando build APK otimizado ==="
        echo "Build Number: $BUILD_NUMBER"
        echo "Build Version: $BUILD_VERSION"
        echo "Python: $(python --version)"
        echo "Flet CLI: $(pip show flet-cli | grep Version)"
        
        # Build com configura√ß√µes espec√≠ficas para evitar tela branca
        flet build apk \
          --verbose \
          --build-number=$BUILD_NUMBER \
          --build-version=$BUILD_VERSION \
          --project "gestao-financeira-premium" \
          --org "com.financeiro.gestao" \
          --description "Gest√£o Financeira Premium" \
          --clear-cache \
          --compile-app \
          --cleanup-app

    # üîß ADICIONADO: Verifica√ß√£o detalhada do APK
    - name: Verify APK Quality
      run: |
        echo "=== üîç Verificando qualidade do APK ==="
        
        # Localiza o APK
        APK_PATH="build/apk/app-release.apk"
        
        if [ -f "$APK_PATH" ]; then
          echo "‚úÖ APK encontrado: $APK_PATH"
          
          # Informa√ß√µes b√°sicas
          APK_SIZE=$(stat -c%s "$APK_PATH" 2>/dev/null || stat -f%z "$APK_PATH")
          APK_SIZE_MB=$((APK_SIZE / 1024 / 1024))
          echo "üìè Tamanho: $APK_SIZE bytes ($APK_SIZE_MB MB)"
          
          # Verifica tamanho m√≠nimo (deve ter pelo menos 20MB para ser v√°lido)
          if [ "$APK_SIZE" -gt 20971520 ]; then  # 20MB
            echo "‚úÖ APK tem tamanho adequado"
          else
            echo "‚ùå AVISO: APK parece muito pequeno ($APK_SIZE_MB MB)"
            echo "Isso pode indicar problema no build"
          fi
          
          # Verifica estrutura interna do APK
          echo "=== üì¶ Estrutura interna do APK ==="
          unzip -l "$APK_PATH" | head -20
          
          # Verifica se cont√©m o c√≥digo Python
          if unzip -l "$APK_PATH" | grep -q "app\.zip"; then
            echo "‚úÖ APK cont√©m c√≥digo Python (app.zip encontrado)"
          else
            echo "‚ùå AVISO: APK pode n√£o conter c√≥digo Python"
          fi
          
          # Verifica assets do Flutter
          if unzip -l "$APK_PATH" | grep -q "flutter_assets"; then
            echo "‚úÖ APK cont√©m assets do Flutter"
          else
            echo "‚ùå AVISO: APK pode n√£o conter assets do Flutter"
          fi
          
          echo "‚úÖ Verifica√ß√£o do APK conclu√≠da"
          
        else
          echo "‚ùå ERRO: APK n√£o foi criado em $APK_PATH"
          echo "Procurando APKs em outros locais:"
          find . -name "*.apk" -type f 2>/dev/null || echo "Nenhum APK encontrado"
          echo "Conte√∫do do diret√≥rio build:"
          find build -type f 2>/dev/null || echo "Diret√≥rio build n√£o existe"
          exit 1
        fi

    - name: Upload APK Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: apk-build-artifact
        path: build/apk
        if-no-files-found: error  # üîß MODIFICADO: error ao inv√©s de warn
        overwrite: false

  build-ipa:
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install flet-cli ${{ env.FLET_CLI_VERSION }}
      run: |
        python -m pip install --upgrade pip
        pip install flet-cli==$FLET_CLI_VERSION

    - name: Flet Build IPA
      run: |
        flet build ipa --verbose --build-number=$BUILD_NUMBER --build-version=$BUILD_VERSION 

    - name: Upload IPA Artifact
      uses: actions/upload-artifact@v4.3.4
      with:
        name: ipa-build-artifact
        path: build/ipa
        if-no-files-found: warn
        overwrite: false
